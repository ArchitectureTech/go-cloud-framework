/**********************************************
** @Des: This file ...
** @Author: yellbuy
** @Date:   2018-09-16 14:24:25
** @Last Modified by:   yellbuy
** @Last Modified time:  2018-09-16 14:24:25
***********************************************/

package libs

import (
	"fmt"
)

// 最大记录数
const AllowMaxQueryCount = 10000000000

// 自定义错误
type YbError struct {
	Errcode int
	Err     error
}

// 继承error
func (err *YbError) Error() string {
	if err.Err != nil {
		return fmt.Sprintf("errcode : %d , errmsg : %s , original err info : %s ", err.Errcode, ErrorMap[err.Errcode], err.Err.Error())
	}
	return fmt.Sprintf("errcode : %d , errmsg : %s", err.Errcode, ErrorMap[err.Errcode])
}

// 成功
func NoError() error {
	return &YbError{E0, nil}
}

// 失败
func FailError(e int, err error) error {
	return &YbError{e, err}
}

const (
	// 调用成功
	E0 = 0
	m0 = "ok"

	// 系统内部异常(调用充值类业务时，请务必联系客服或通过订单查询接口检测订单，避免造成损失)
	E100000 = 100000
	m100000 = "系统内部异常(调用充值类业务时，请务必联系客服或通过订单查询接口检测订单，避免造成损失)"

	// 错误的请求KEY	101
	E100001 = 100001
	m100001 = "错误的请求KEY"

	//该KEY无请求权限	102
	E100002 = 100002
	m100002 = "该KEY无请求权限"

	//KEY过期	103
	E100003 = 100003
	m100003 = "KEY过期"

	// 错误的OPENID	104
	E100004 = 100004
	m100004 = "错误的OPENID"

	//应用未审核超时，请提交认证	105
	E100005 = 100005
	m100005 = "应用未审核超时，请提交认证"

	//未知的请求源
	E100007 = 100007
	m100007 = "未知的请求源"

	//被禁止的IP
	E100008 = 100008
	m100008 = "被禁止的IP"

	//被禁止的KEY
	E100009 = 100009
	m100009 = "被禁止的KEY"

	//当前IP请求超过限制
	E100011 = 100011
	m100011 = "当前IP请求超过限制"

	//请求超过次数限制
	E100012 = 100012
	m100012 = "请求超过次数限制"

	//测试KEY超过请求限制
	E100013 = 100013
	m100013 = "测试KEY超过请求限制"

	//接口维护
	E100020 = 100020
	m100020 = "接口维护"

	//接口停用
	E100021 = 100021
	m100021 = "接口停用"

	// Base 模块
	// 操作失败
	E200000 = 200000
	m200000 = "操作调用失败"

	// Base 模块
	// 操作失败
	E201000 = 201000
	m201000 = "操作失败"

	// 节点不存在
	E201001 = 201001
	m201001 = "节点不存在"

	// 父节点不存在
	E201002 = 201002
	m201002 = "父节点不存在"

	// 根节点只能添加一个
	E201003 = 201003
	m201003 = "根节点只能添加一个"

	// 参数验证失败
	E201004 = 201004
	m201004 = "参数验证失败"

	// 编码（code）必须唯一
	E201005 = 201005
	m201005 = "编码（code）必须唯一"

	// 存在非法字符
	E201006 = 201006
	m201006 = "存在非法字符"

	// 不能删除含下级节点的组织
	E201007 = 201007
	m201007 = "不能删除含下级节点的组织"

	// 父节点不能为自身
	E201008 = 201008
	m201008 = "父节点不能为自身"

	//同级名称必须唯一
	E201009 = 201009
	m201009 = "同级名称必须唯一"
	// 编码（code）必须唯一
	E201010 = 201010
	m201010 = "标识(Key)必须唯一"
	// 用户管理
	E201021 = 201021
	m201021 = "用户名不能为空"
	E201022 = 202022
	m201022 = "Parentid不能为Id"
	E201023 = 202023
	m201023 = "用户所属组织的标识不存在"
	E201024 = 201024
	m201024 = "用户名重复"
	E201025 = 201025
	m201025 = "手机号重复"
	E201026 = 201026
	m201026 = "Email重复"
	E201027 = 201027
	m201027 = "编码重复"
	//--------------------

	//credit 错误代码 E201200
	//Id 号错误
	E201201 = 201201
	m201201 = "Id 号错误"
	// 名称超长
	E201202 = 201202
	m201202 = "名称超长"
	//名称为空
	E201203 = 201203
	m201203 = "名称为空"
	// 数据验证错误
	E201204 = 201204
	m201204 = "数据验证错误"
	// 查询错误
	E201205 = 201205
	m201205 = "查询错误"
)

// 错误代码字典
var ErrorMap = map[int]string{
	E0: m0, E100000: m100000, E100001: m100001, E100002: m100002,
	E100003: m100003, E100004: m100004, E100005: m100005,
	E100007: m100007, E100008: m100008,
	E100009: m100009, E100011: m100011,
	E100012: m100012, E100013: m100013,
	E100020: m100020, E100021: m100021,
	E200000: m200000, E201000: m201000, E201001: m201001,
	E201002: m201002, E201003: m201003, E201004: m201004,
	E201005: m201005, E201006: m201006, E201007: m201007,
	E201008: m201008, E201009: m201009,E201010:m201010,
	E201021: m201021, E201022: m201022, E201023: m201023,
	E201024: m201024, E201025: m201025, E201026: m201026,
	E201027: m201027,
	E201201: m201201, E201202: m201202, E201203: m201203,
	E201204: m201205}
